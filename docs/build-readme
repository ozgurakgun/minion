A guide to Minion's build system and layout


This document provides a brief outline of Minion's build system and the contents of various directories.

** Root directory **

The important files in the root directory of Minion are:
build-all-windows.bat - Builds a copy of Minion using visual C++ instead of the standard gcc. This file may require some system-specific editing.
build-all.sh - builds both a debug and non-debug version of Minion. Used mainly during automated building of releases.

CMakeLists.txt - The guts of the build system, tells CMake what to look for and
what to build.

There are a number of flags which can be given to cmake, to build various different varieties of Minion.

DEBUG=1 - Turns on a large number of checks in the Minion source code, denoted D_ASSERT. This will massively slow down Minion, but does a large number of checks. If any assert ever fails in debug mode, this shows the existence of a bug which should be fixed.

Note that DEBUG mode turns off optimising, as optimised code is hard to run through a debugger. If you want to run minion with debug flags but don't care about being able to use a debugger, then add MYFLAGS="-O2" to get a faster debugging executable.


PRINT=1 - Produces a LARGE amount of output describing the internals of Minion. This mode is mainly useful in tracking down very complex bugs which cause stack corruption. If you want to information about Minion's search for research reasons rather than debugging reasons, look at the ' INFO ' flag.

PROFILE=1 - Makes a copy of Minion which aims to be best for profiling. This means turning on optimization, but disabling in-lining which can make profiling difficult. Note that this means that the output must be taken with a pinch of salt, some very small functions may seem to take a very large amount of execution time.

INFO=1 - For a small (about 2x) overhead, makes Minion print out a range of information about how many propagations occurred, very changing events occurred, etc. This mode is likely to be expanded in the future. Any requests welcome!

NOWATCHED=1 - Removes watched literals, which produce a small overhead even when not in use.

QUICK=1 - Reduces compile time by compiling less copies of each constraint, resulting in a slower executable. This is particularly useful to speed up testing, as it (should) neither introduce nor remove any bugs, simply lead to a slower executable.

NAME=<insert name> - allows the name for the executable to be chosen. If this is ommited, then the executable is name minion with as many as -debug, -quick, -profile and -info as were required at compile time.

Additionally you can set the following environment variables which affect the
build.

CPU="<insert flags here>" - allows any compiler flags to be explicitly added to Minion's compile. The mostly likely use of this is to add more advanced optimization flags.

Actually compiling Minion.

Minion works on the assumption that all files which should be compiled end with '.cpp', and are in either the minion or minion/build_constraints directories. All files in the 'build_constraints' directories are automatically generated and should not be changed.
